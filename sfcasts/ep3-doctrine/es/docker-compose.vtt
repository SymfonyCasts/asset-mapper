WEBVTT

00:00:01.016 --> 00:00:05.616 align:middle
Necesitamos poner en marcha una
base de datos: MySQL, Postgresql,

00:00:06.246 --> 00:00:09.086 align:middle
lo que sea. Si ya tienes una en marcha

00:00:09.446 --> 00:00:13.516 align:middle
, ¡genial! Todo lo que
tienes que hacer es copiar

00:00:13.916 --> 00:00:18.126 align:middle
tu variable de entorno DATABASE_URL, abrir o

00:00:18.676 --> 00:00:21.986 align:middle
crear un archivo .env.local, pegarlo,
y luego cambiarlo para que coincida

00:00:22.806 --> 00:00:27.506 align:middle
con lo que esté usando tu configuración local.
Si decides hacer esto, no dudes en saltar al

00:00:27.886 --> 00:00:29.876 align:middle
final del capítulo 4, donde

00:00:30.596 --> 00:00:34.746 align:middle
configuramos el server_version. En mi caso,
no tengo una base de datos funcionando

00:00:34.976 --> 00:00:37.316 align:middle
localmente en mi sistema... y no voy

00:00:37.776 --> 00:00:40.156 align:middle
a instalar una. En su lugar,

00:00:40.676 --> 00:00:43.326 align:middle
quiero utilizar Docker. Y
vamos a utilizar Docker de una

00:00:43.996 --> 00:00:49.046 align:middle
forma interesante. Tengo PHP instalado
localmente: Así que no voy a usar Docker

00:00:49.046 --> 00:00:51.546 align:middle
para crear un contenedor específicamente

00:00:51.546 --> 00:01:00.116 align:middle
para PHP. En su lugar, voy a utilizar Docker simplemente
para ayudar a arrancar cualquier servicio que

00:01:00.656 --> 00:01:03.366 align:middle
mi aplicación necesite
localmente. Y en este momento,

00:01:03.986 --> 00:01:10.486 align:middle
necesito un servicio de base de datos. Gracias
a cierta magia entre Docker y el binario de

00:01:11.216 --> 00:01:16.716 align:middle
Symfony, esto va a ser súper fácil. Para
empezar, ¿recuerdas cuando la receta de Doctrine

00:01:17.356 --> 00:01:21.496 align:middle
nos preguntó si queríamos
la configuración de Docker?

00:01:21.676 --> 00:01:25.056 align:middle
Como dijimos que

00:01:25.716 --> 00:01:29.016 align:middle
sí, la receta nos dio los archivos
docker-compose.yml ydocker-compose.override.yml.

00:01:29.346 --> 00:01:33.286 align:middle
Cuando Docker arranque, leerá ambos...
y están divididos en dos partes

00:01:33.286 --> 00:01:36.356 align:middle
por si quieres usar también
Docker para desplegar

00:01:37.006 --> 00:01:40.596 align:middle
en producción. Pero no vamos a preocuparnos
por eso: sólo queremos usar Docker para

00:01:40.596 --> 00:01:43.256 align:middle
facilitar la vida en el desarrollo local.

00:01:43.946 --> 00:01:48.606 align:middle
Estos archivos dicen que arrancarán
un único contenedor de base de datos

00:01:48.946 --> 00:01:52.786 align:middle
Postgres con un usuario llamado symfony y una

00:01:53.776 --> 00:02:01.136 align:middle
contraseña ChangeMe. También expondrá el puerto
5432 del contenedor -que es el puerto normal de

00:02:01.646 --> 00:02:05.336 align:middle
Postgres- a nuestra máquina
anfitriona en un puerto

00:02:06.036 --> 00:02:11.076 align:middle
aleatorio. Esto significa que vamos a poder
hablar con el contenedor Docker de Postgresql como

00:02:11.396 --> 00:02:14.026 align:middle
si se estuviera ejecutando en
nuestra máquina local... siempre

00:02:14.456 --> 00:02:18.116 align:middle
que conozcamos el puerto aleatorio
que Docker ha elegido. Veremos cómo

00:02:18.586 --> 00:02:20.166 align:middle
funciona en un minuto. Por cierto, si quieres

00:02:21.016 --> 00:02:26.316 align:middle
utilizar MySQL en lugar de Postgres, puedes hacerlo.
Puedes actualizar estos archivos... o eliminar ambos

00:02:26.876 --> 00:02:28.586 align:middle
y ejecutar php bin/console
make:docker:database para

00:02:28.856 --> 00:02:33.076 align:middle
generar un nuevo archivo de
composición para MySQL o MariaDB.

00:02:33.446 --> 00:02:37.666 align:middle
Yo me voy a quedar con
Postgres porque es increíble.

00:02:37.666 --> 00:02:41.856 align:middle
Llegados a este punto, vamos a poner en marcha

00:02:42.656 --> 00:02:47.096 align:middle
Docker y aprender un poco sobre cómo
comunicarse con la base de datos que vive dentro.

00:02:47.096 --> 00:02:48.886 align:middle
Si te sientes bastante cómodo con

00:02:49.616 --> 00:02:54.116 align:middle
Docker, no dudes en pasar al siguiente capítulo.
De todas formas, vamos a poner en marcha

00:02:55.016 --> 00:02:57.016 align:middle
nuestro contenedor. Primero, asegúrate

00:02:57.616 --> 00:03:01.946 align:middle
de que tienes Docker realmente
instalado en tu máquina: No lo

00:03:02.676 --> 00:03:05.886 align:middle
mostraré porque varía según el
sistema operativo. Luego, busca tu

00:03:06.516 --> 00:03:12.436 align:middle
terminal y ejecuta: docker-compose up
-d El -d significa "ejecutar en segundo

00:03:12.546 --> 00:03:14.916 align:middle
plano como un demonio". La primera vez que

00:03:15.746 --> 00:03:19.696 align:middle
lo ejecute, probablemente descargará un montón
de cosas. Pero al final, ¡nuestro contenedor

00:03:20.216 --> 00:03:23.556 align:middle
debería arrancar! ¡Genial! ¿Pero ahora qué?

00:03:23.886 --> 00:03:26.316 align:middle
¿Cómo podemos hablar con

00:03:26.876 --> 00:03:28.756 align:middle
el contenedor? Ejecuta un
comando llamado: docker-compose

00:03:29.576 --> 00:03:34.426 align:middle
ps Esto muestra información
sobre todos los contenedores que

00:03:34.426 --> 00:03:36.596 align:middle
se están ejecutando actualmente... sólo uno

00:03:36.876 --> 00:03:38.236 align:middle
para nosotros. Lo realmente

00:03:38.846 --> 00:03:45.186 align:middle
importante es que el puerto 5432 del
contenedor está conectado al puerto 50700

00:03:45.186 --> 00:03:49.516 align:middle
de mi máquina anfitriona. Esto significa que

00:03:50.176 --> 00:03:56.176 align:middle
si hablamos con este puerto, estaremos hablando realmente
con esa base de datos Postgres. Ah, y este puerto

00:03:56.936 --> 00:04:01.326 align:middle
es aleatorio: será diferente en tu
máquina... e incluso cambiará cada vez

00:04:01.646 --> 00:04:05.726 align:middle
que paremos y arranquemos nuestro contenedor.
Pronto hablaremos de ello. Pero ahora

00:04:06.086 --> 00:04:07.346 align:middle
que conocemos el puerto

00:04:08.136 --> 00:04:14.536 align:middle
50700, podemos utilizarlo para conectarnos a la base de
datos. Por ejemplo, como estoy utilizando Postgres, podría

00:04:15.076 --> 00:04:22.826 align:middle
ejecutar: Esto significa: conectar con Postgres
en el puerto 127.0.0.1 50700 utilizando el usuario

00:04:22.826 --> 00:04:35.986 align:middle
symfony y hablando con la base de
datos app. Todo esto está configurado

00:04:35.986 --> 00:04:41.066 align:middle
en el archivo docker-compose.yml.
Copia la contraseña de ChangeMe

00:04:41.066 --> 00:04:56.226 align:middle
porque esa última bandera le dice a Postgres
que te pida esa contraseña. Pégala y...

00:04:56.846 --> 00:04:57.926 align:middle
¡estamos dentro!

00:04:58.276 --> 00:05:04.796 align:middle
Si utilizas MySQL, podemos hacer esto mismo con
un comando mysql. Pero esto sólo funciona si

00:05:05.446 --> 00:05:12.156 align:middle
tenemos ese comando psql instalado en nuestra
máquina local. Así que vamos a probar con

00:05:12.676 --> 00:05:14.256 align:middle
otro comando. Ejecuta docker-compose ps de

00:05:14.846 --> 00:05:16.826 align:middle
nuevo. El contenedor se

00:05:17.636 --> 00:05:23.216 align:middle
llama database, que proviene de nuestro
archivo docker-compose.yml . Así podremos

00:05:23.796 --> 00:05:30.586 align:middle
cambiar el comando anterior por: docker-compose
exec database psql --username symfony --password

00:05:31.396 --> 00:05:35.796 align:middle
app Esta vez, estamos ejecutando el comando

00:05:35.916 --> 00:05:39.916 align:middle
psql dentro del contenedor, por lo que

00:05:40.376 --> 00:05:42.456 align:middle
no necesitamos instalarlo localmente.
Escribe ChangeMe como contraseña

00:05:43.246 --> 00:05:45.826 align:middle
y... ¡vamos a estar dentro! La

00:05:46.046 --> 00:05:47.586 align:middle
cuestión es: ¡sólo

00:05:48.316 --> 00:05:51.866 align:middle
con ejecutar docker-compose
up, tenemos un contenedor de

00:05:52.246 --> 00:05:56.456 align:middle
base de datos Postgres con el
que podemos hablar! Por cierto,

00:05:57.216 --> 00:06:02.266 align:middle
cuando estés preparado para detener el contenedor más
adelante, podrás ejecut arlo: docker-compose stop Que

00:06:02.816 --> 00:06:05.216 align:middle
básicamente apaga el
contenedor. O puedes ejecutar

00:06:05.716 --> 00:06:08.436 align:middle
el más común docker-compose down que apaga

00:06:08.436 --> 00:06:12.326 align:middle
los contenedores y los elimina.
Para volver a arrancar,

00:06:13.076 --> 00:06:18.266 align:middle
es lo mismo: docker-compose up -d
Pero fíjate en que cuando volvemos

00:06:18.266 --> 00:06:21.016 align:middle
a ejecutar docker-compose ps , ¡el puerto de

00:06:21.606 --> 00:06:25.766 align:middle
mi máquina anfitriona es un puerto
aleatorio diferente! Así que, en

00:06:26.446 --> 00:06:32.176 align:middle
teoría, podríamos configurar la variable
DATABASE_URLpara que apunte a nuestra base

00:06:32.176 --> 00:06:36.366 align:middle
de datos Postgres, incluyendo
el uso del puerto correcto.

00:06:37.106 --> 00:06:41.556 align:middle
¡Pero ese puerto aleatorio que sigue
cambiando va a ser molesto! Afortunadamente,

00:06:42.236 --> 00:06:44.656 align:middle
¡hay un truco para esto! Resulta

00:06:45.346 --> 00:06:50.716 align:middle
que nuestra aplicación ya está configurada,
¡sin que nosotros hagamos nada! Eso

00:06:51.346 --> 00:06:52.316 align:middle
a continuación
