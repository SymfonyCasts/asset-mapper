WEBVTT

00:00:01.016 --> 00:00:05.116 align:middle
Me gusta mucho añadir un comportamiento
de marca de tiempo a mis entidades.

00:00:05.436 --> 00:00:10.396 align:middle
Ahí tienes las propiedades $createdAt y
$updatedAt que se establecen automáticamente.

00:00:10.966 --> 00:00:11.396 align:middle
Simplemente...

00:00:11.476 --> 00:00:13.806 align:middle
ayuda a llevar la cuenta de
cuándo sucedieron las cosas.

00:00:14.576 --> 00:00:19.996 align:middle
Hemos añadido $createdAt y lo hemos establecido
inteligentemente a mano en el constructor.

00:00:20.476 --> 00:00:21.976 align:middle
¿Pero qué pasa con $updatedAt?

00:00:22.746 --> 00:00:29.066 align:middle
Doctrine tiene un impresionante sistema de eventos, y
podríamos engancharnos a él para ejecutar un código

00:00:29.066 --> 00:00:31.456 align:middle
en la "actualización" que
establezca esa propiedad.

00:00:32.186 --> 00:00:35.406 align:middle
Pero hay una biblioteca que ya hace eso.

00:00:35.406 --> 00:00:37.036 align:middle
Así que vamos a instalarla.

00:00:37.816 --> 00:00:44.826 align:middle
En tu terminal, ejecuta: composer require
stof/doctrine-extensions-bundle Esto instala un

00:00:44.826 --> 00:00:50.336 align:middle
pequeño bundle, que es una envoltura de
una biblioteca llamada DoctrineExtensions.

00:00:51.046 --> 00:00:54.216 align:middle
Como muchos paquetes, éste incluye una receta.

00:00:54.746 --> 00:00:59.936 align:middle
Pero ésta es la primera receta que
proviene del repositorio "contrib".

00:01:00.776 --> 00:01:04.926 align:middle
Recuerda: Symfony tiene en realidad
dos repositorios de recetas.

00:01:05.216 --> 00:01:09.126 align:middle
Está el principal, que está estrechamente
vigilado por el equipo principal de Symfony.

00:01:09.676 --> 00:01:11.816 align:middle
Y otro llamado recipes-contrib.

00:01:13.146 --> 00:01:16.286 align:middle
Hay algunos controles de
calidad en ese repos itorio,

00:01:16.716 --> 00:01:18.806 align:middle
pero está mantenido por la comunidad.

00:01:18.806 --> 00:01:22.096 align:middle
La primera vez que Symfony
instala una receta del repositorio

00:01:22.096 --> 00:01:25.806 align:middle
"contrib", te pregunta si está bien.

00:01:25.806 --> 00:01:29.226 align:middle
Voy a decir p por "sí permanentemente".

00:01:29.976 --> 00:01:32.956 align:middle
Entonces ejecuta: get
status ¡Impresionante! Ha

00:01:33.316 --> 00:01:36.896 align:middle
habilitado un bundle y ha añadido
un nuevo archivo de configuración

00:01:37.146 --> 00:01:38.866 align:middle
que veremos en un segundo.

00:01:38.866 --> 00:01:42.836 align:middle
Así que este bundle tiene
obviamente su propia documentación.

00:01:43.286 --> 00:01:43.826 align:middle
Puedes

00:01:43.826 --> 00:01:48.296 align:middle
buscar stof/doctrine-extensions-bundle
y encontrarla en Symfony.com.

00:01:48.916 --> 00:01:55.136 align:middle
Pero la mayor parte de la documentación está
en la biblioteca subyacente DoctrineExtensions...

00:01:55.606 --> 00:02:01.596 align:middle
que contiene un montón de comportamientos muy
interesantes, como "sluggable" y "timestampable".

00:02:02.346 --> 00:02:04.366 align:middle
Vamos a añadir primero "timestampable".

00:02:04.366 --> 00:02:10.836 align:middle
Primer paso: entra en config/packages/ y abre el
archivo de configuración que acaba de añadir.

00:02:11.376 --> 00:02:20.016 align:middle
Aquí, añade orm porque estamos utilizando Doctrine
ORM, luego default, y por último timestampable: true.

00:02:20.916 --> 00:02:23.246 align:middle
Esto no hará realmente nada todavía.

00:02:23.756 --> 00:02:29.016 align:middle
Sólo activa un oyente de Doc
trine que buscará entidades

00:02:29.016 --> 00:02:34.596 align:middle
que soporten timestampable cada vez
que se inserte o actualice una entidad.

00:02:35.386 --> 00:02:39.206 align:middle
¿Cómo hacemos que nuestro
VinylMix admita timestampable?

00:02:39.976 --> 00:02:45.536 align:middle
La forma más sencilla (y la que a mí
me gusta hacer) es mediante un rasgo.

00:02:46.226 --> 00:02:50.436 align:middle
En la parte superior de la clase,
di use TimestampableEntity.

00:02:51.346 --> 00:02:51.776 align:middle
Eso es todo.

00:02:52.176 --> 00:02:52.826 align:middle
¡Ya hemos terminado!

00:02:53.076 --> 00:02:54.166 align:middle
¡Hora de comer!

00:02:54.946 --> 00:03:01.396 align:middle
Para entender esta magia negra, mantén pulsado
"cmd" o "ctrl" y haz clic en TimestampableEntity.

00:03:02.176 --> 00:03:05.536 align:middle
Esto añade dos propiedades:
createdAt y updatedAt.

00:03:06.216 --> 00:03:11.516 align:middle
Y son campos normales, como el
createdAt que teníamos antes.

00:03:12.286 --> 00:03:17.556 align:middle
También tiene métodos getter y setter aquí
abajo, igual que tenemos en nuestra entidad.

00:03:18.376 --> 00:03:22.776 align:middle
La magia es este atributo
#[Gedmo\Timestampable()].

00:03:23.376 --> 00:03:26.756 align:middle
Esto dice que: esta propiedad
debe establecerse on:

00:03:26.756 --> 00:03:31.026 align:middle
'update' y esta propiedad debe
establecerse on: 'create'.

00:03:31.026 --> 00:03:35.756 align:middle
Gracias a este rasgo,
¡obtenemos todo esto gratis!

00:03:36.386 --> 00:03:39.556 align:middle
Y... ya no necesitamos
nuestra propiedad createdAt...

00:03:39.976 --> 00:03:41.936 align:middle
porque ya vive en el trait.

00:03:41.936 --> 00:03:43.956 align:middle
Así que elimina la propiedad...

00:03:44.296 --> 00:03:45.556 align:middle
y el constructor...

00:03:46.686 --> 00:03:49.546 align:middle
y aquí abajo, elimina los
métodos getter y setter.

00:03:50.106 --> 00:03:51.056 align:middle
¡Limpieza!

00:03:51.946 --> 00:03:58.206 align:middle
El trait tiene una propiedad createdAt como la que
teníamos antes, pero además añade un campo updatedAt.

00:03:58.776 --> 00:04:02.476 align:middle
Así que tenemos que crear
una nueva migración para eso.

00:04:03.206 --> 00:04:03.966 align:middle
Ya conoces el procedimiento.

00:04:04.316 --> 00:04:09.636 align:middle
En tu terminal, ejecuta: symfony
console make:migration Entonces...

00:04:09.636 --> 00:04:11.256 align:middle
vamos a comprobar ese archivo...

00:04:11.716 --> 00:04:14.176 align:middle
para asegurarnos de que tiene
el aspecto que esperamos.

00:04:14.876 --> 00:04:15.926 align:middle
Veamos aquí...

00:04:16.546 --> 00:04:20.876 align:middle
¡sí! Tenemos ALTER TABLE
vinyl_mix ADD updated_at.

00:04:21.546 --> 00:04:28.416 align:middle
Y aparentemente la columna created_at será
un poco diferente a la que teníamos antes.

00:04:28.416 --> 00:04:34.536 align:middle
Bien, vamos a ejecutarlo: symfony
console doctrine:migrations:migrate Y...

00:04:35.036 --> 00:04:36.496 align:middle
¡falla! [...]

00:04:37.036 --> 00:04:41.776 align:middle
column "updated_at" of relation
"vinyl_mix" contains null values. Esto

00:04:42.416 --> 00:04:45.226 align:middle
es un Not null violation... lo cual

00:04:45.476 --> 00:04:47.496 align:middle
tiene sentido. Nuestra

00:04:47.496 --> 00:04:50.376 align:middle
base de datos ya tiene un
montón de registros... así que

00:04:50.756 --> 00:04:57.466 align:middle
cuando intentamos añadir una nueva columna
updated_at que no permite valores nulos ... se

00:04:57.796 --> 00:04:58.766 align:middle
vuelve loco. Si

00:04:59.676 --> 00:05:03.356 align:middle
el estado actual de nuestra base de
datos ya estuviera en producción,

00:05:03.746 --> 00:05:06.426 align:middle
tendríamos que ajustar esta migración para

00:05:06.546 --> 00:05:11.536 align:middle
dar a la nueva columna un valor por defecto
para esos registros existentes. Entonces

00:05:12.206 --> 00:05:15.286 align:middle
podríamos volver a cambiarla
para que no permita nulos. Para

00:05:16.076 --> 00:05:19.766 align:middle
saber más sobre el manejo de migraciones
fallidas, consulta un capítulo de

00:05:19.766 --> 00:05:21.956 align:middle
nuestro tutorial de Doctrine de Symfony 5. Pero

00:05:22.646 --> 00:05:27.866 align:middle
como todavía no tenemos una base de datos
de producción que contenga viny_mix filas,

00:05:28.436 --> 00:05:33.966 align:middle
podemos tomar un atajo: eliminar la base de
datos y empezar de nuevo con cero filas. Para

00:05:34.596 --> 00:05:38.236 align:middle
ello, ejecuta symfony console
doctrine:database:drop --force

00:05:38.546 --> 00:05:41.086 align:middle
para eliminar completamente
nuestra base de datos. Y

00:05:41.086 --> 00:05:46.636 align:middle
vuelve a crearla con symfony console
doctrine:database:create. En este punto,

00:05:46.806 --> 00:05:52.776 align:middle
tenemos una base de datos vacía sin tablas, incluso
la tabla de migraciones ha desaparecido. Así que

00:05:52.776 --> 00:05:57.756 align:middle
podemos volver a ejecutar todas nuestras
migraciones desde el principio. Hazlo

00:05:58.656 --> 00:06:04.656 align:middle
: symfony console doctrine:migrations:migrate
¡Genial! Se han ejecutado tres

00:06:04.656 --> 00:06:08.426 align:middle
migraciones: todas con éxito. De vuelta

00:06:09.276 --> 00:06:14.196 align:middle
a nuestro sitio, si vamos a "Examinar
mezclas", está vacío... porque

00:06:14.446 --> 00:06:16.406 align:middle
hemos vaciado nuestra base
de datos. Así que vayamos

00:06:16.406 --> 00:06:21.616 align:middle
a /mix/new para crear la mezcla ID 1... y luego

00:06:22.036 --> 00:06:23.876 align:middle
actualicemos unas cuantas
veces más. Ahora dirígete a

00:06:24.846 --> 00:06:26.826 align:middle
/mix/7 ... y

00:06:27.186 --> 00:06:32.096 align:middle
sube la nota, lo que actualizará
ese VinylMix. De acuerdo

00:06:33.116 --> 00:06:36.006 align:middle
¡Veamos si la marca de tiempo
ha funcionado! Comprueba

00:06:36.616 --> 00:06:41.406 align:middle
la base de datos ejecutando: symfony
console doctrine:query:sql 'SELECT * FROM

00:06:41.446 --> 00:06:45.906 align:middle
vinyl_mix WHERE id = 7' Y... ¡impresionante!

00:06:46.336 --> 00:06:51.476 align:middle
El created_at está configurado y
luego el updated_at está configurado

00:06:51.546 --> 00:06:55.686 align:middle
justo unos segundos después de
que hayamos votado la mezcla.

00:06:56.276 --> 00:07:02.376 align:middle
Funciona. Ahora podemos añadir fácilmente
timestampable a cualquier entidad nueva en el

00:07:02.376 --> 00:07:05.106 align:middle
futuro, simplemente añadiendo
ese rasgo. A continuación:

00:07:06.116 --> 00:07:09.636 align:middle
vamos a aprovechar otro
comportamiento: sluggable. Esto nos

00:07:10.236 --> 00:07:12.636 align:middle
permitirá crear URLs más elegantes

00:07:12.876 --> 00:07:18.276 align:middle
guardando automáticamente una versión segura
de la URL del título en una nueva propiedad
