WEBVTT

00:00:01.086 --> 00:00:02.146 align:middle
¡Es hora de celebrarlo! Estamos

00:00:02.416 --> 00:00:08.596 align:middle
en producción, y en realidad ha sido tan sencillo
como asegurarnos de que Tailwind se estaba construyendo

00:00:08.886 --> 00:00:11.406 align:middle
y ejecutar el comando asset-map:compile.

00:00:11.926 --> 00:00:18.266 align:middle
Ahora que estamos aquí, hay algunas cosas que debemos
comprobar para asegurarnos de que nuestro sitio es rápido.

00:00:18.916 --> 00:00:23.056 align:middle
La primera es comprobar que tu
servidor web utiliza HTTP/2.

00:00:23.596 --> 00:00:28.356 align:middle
Ya hemos hablado de eso antes, así
que espero que ya lo tengas activado.

00:00:29.076 --> 00:00:30.496 align:middle
Lo segundo es...

00:00:30.826 --> 00:00:32.646 align:middle
bueno... en realidad no es nada.

00:00:32.986 --> 00:00:37.916 align:middle
Sólo quiero señalar que nada en
AssetMapper combina nuestros archivos

00:00:38.026 --> 00:00:41.146 align:middle
para reducir el número de peticiones HTTP.

00:00:41.616 --> 00:00:45.946 align:middle
Hablaremos más de esto en unos
minutos, pero gracias a HTTP/2,

00:00:46.346 --> 00:00:50.286 align:middle
casi seguro que no necesitas
combinar tus archivos.

00:00:50.946 --> 00:00:54.926 align:middle
Así que si estabas pensando
que esto faltaba, ¡no es así!

00:00:55.326 --> 00:00:56.366 align:middle
Es por diseño.

00:00:57.016 --> 00:00:57.496 align:middle
¡Qué bien!

00:00:57.796 --> 00:00:58.596 align:middle
Una cosa menos.

00:00:59.466 --> 00:01:01.456 align:middle
Pero, ¿qué pasa con la
minificación de nuestros archivos?

00:01:01.926 --> 00:01:08.396 align:middle
Es cierto: ahora mismo, nuestros archivos se
sirven sin minificar, y eso es un problema.

00:01:08.996 --> 00:01:12.556 align:middle
Queremos que nuestros archivos CSS
y JavaScript estén minificados...

00:01:12.846 --> 00:01:14.586 align:middle
o al menos comprimidos.

00:01:14.586 --> 00:01:17.486 align:middle
Y esta es la tercera cosa
en la que debemos pensar.

00:01:18.156 --> 00:01:21.996 align:middle
Pero... esto es algo que puede
hacer nuestro servidor web.

00:01:22.696 --> 00:01:29.086 align:middle
Sí, si lo pides amablemente, deberías poder convencer
a tu servidor web de que comprima tus archivos para que

00:01:29.306 --> 00:01:32.176 align:middle
sean más pequeños cuando se
envíen a través de la red.

00:01:32.666 --> 00:01:38.226 align:middle
Esto es algo que admiten todos los servidores
web, y lo hace automáticamente Platform.sh.

00:01:38.756 --> 00:01:39.916 align:middle
Así es como podemos verlo

00:01:40.446 --> 00:01:43.066 align:middle
Ve a las herramientas de
"Red" y selecciona JavaScript.

00:01:44.226 --> 00:01:46.756 align:middle
Selecciona uno de los archivos
y luego ve a "Encabezados".

00:01:47.356 --> 00:01:48.766 align:middle
Haré esto un poco más grande.

00:01:49.756 --> 00:01:53.356 align:middle
Vale, ¿ves esta cabecera de
respuesta "Content-Encoding"?

00:01:53.856 --> 00:01:55.156 align:middle
Eso es compresión.

00:01:55.756 --> 00:02:01.016 align:middle
Este "br" significa algo llamado Brotli,
que es más delicioso de lo que parece.

00:02:01.576 --> 00:02:04.016 align:middle
Brotli es un formato de compresión avanzado.

00:02:04.586 --> 00:02:06.606 align:middle
El otro valor común es gzip.

00:02:07.326 --> 00:02:10.856 align:middle
Así que todos nuestros archivos
estáticos ya están comprimidos

00:02:11.356 --> 00:02:17.276 align:middle
Lo conseguimos gratis con Platform.sh, así que
podemos tachar ese elemento de nuestra lista.

00:02:17.696 --> 00:02:22.866 align:middle
Consulta los documentos de tu sistema de despliegue o
servidor web para saber cómo hacerlo en tu situación.

00:02:23.656 --> 00:02:29.026 align:middle
Pero espera, ¿minificar y
comprimir son lo mismo o diferente?

00:02:29.656 --> 00:02:31.736 align:middle
En realidad, son un poco diferentes.

00:02:32.286 --> 00:02:36.426 align:middle
Tanto minificar como comprimir reducen
enormemente el tamaño de un archivo.

00:02:37.016 --> 00:02:38.756 align:middle
Nosotros utilizamos la
compresión. La minificación

00:02:39.256 --> 00:02:42.986 align:middle
puede dar lugar a archivos
ligeramente más pequeños

00:02:43.456 --> 00:02:48.296 align:middle
-en parte porque eliminará los comentarios
del código-, pero no es significativo.

00:02:48.956 --> 00:02:53.936 align:middle
Los propios servidores web no admiten la
minificación, pero si utilizas Cloudflare,

00:02:54.386 --> 00:02:57.126 align:middle
hay una forma de activar la
minificación automática.

00:02:57.636 --> 00:03:00.656 align:middle
Probablemente no supondrá una gran
diferencia, pero puedes probarlo.

00:03:01.556 --> 00:03:05.546 align:middle
La cuarta y última cosa que tenemos
que hacer es asegurarnos de que todos

00:03:05.546 --> 00:03:09.326 align:middle
nuestros archivos estáticos están
configurados para una caducidad a largo plazo.

00:03:10.036 --> 00:03:14.346 align:middle
Como tenemos estos bonitos nombres de archivos
versionados, cuando un usuario visite nuestro sitio,

00:03:14.756 --> 00:03:20.826 align:middle
queremos que descargue este archivo una
vez y nunca, nunca lo vuelva a descargar.

00:03:21.426 --> 00:03:23.696 align:middle
Queremos que lo guarden en caché para siempre.

00:03:24.366 --> 00:03:29.596 align:middle
Porque, si cambiamos algo dentro de este
archivo, ¡cambiará todo el nombre del archivo!

00:03:29.986 --> 00:03:34.606 align:middle
Y el navegador del usuario descargará naturalmente
la nueva versión la próxima vez que visite

00:03:34.606 --> 00:03:35.006 align:middle
el sitio.

00:03:35.746 --> 00:03:39.996 align:middle
Aquí, en "Cabeceras", vemos una
cabecera de respuesta "Caduca".

00:03:40.666 --> 00:03:47.406 align:middle
De forma predeterminada, Platform.sh añade una cabecera
"Expires" para los activos estáticos, establecida en una hora.

00:03:47.926 --> 00:03:50.476 align:middle
Podemos hacerlo mucho mejor.

00:03:51.056 --> 00:03:54.126 align:middle
En .platform.app.yaml, en locations...

00:03:54.486 --> 00:03:55.076 align:middle
ahí vamos...

00:03:55.656 --> 00:03:57.856 align:middle
vemos... expires: 1h.

00:03:58.596 --> 00:04:03.326 align:middle
Eso está bien como valor por defecto para otros
activos estáticos que podamos tener en nuestro sitio.

00:04:03.756 --> 00:04:05.596 align:middle
Así que voy a dejarlo así.

00:04:06.316 --> 00:04:08.596 align:middle
Pero añade otra regla
para ser más específico.

00:04:09.116 --> 00:04:18.426 align:middle
Para la regex, si la URL coincide con /assets/ cualquier
cosa, entonces establece la cabecera expires en 365d.

00:04:18.946 --> 00:04:23.326 align:middle
Sí, 1 año, ¡eso es para
siempre en tiempo de Internet!

00:04:24.086 --> 00:04:25.246 align:middle
¡Genial! Vamos a confirmarlo...

00:04:26.366 --> 00:04:28.546 align:middle
y desplegar, ¡desplegar!

00:04:31.586 --> 00:04:35.286 align:middle
Cuando termine, actualiza.

00:04:36.346 --> 00:04:38.226 align:middle
No veremos nada obvio...

00:04:38.376 --> 00:04:42.546 align:middle
pero comprobemos uno de nuestros
archivos JavaScript, como app.js.

00:04:43.176 --> 00:04:44.976 align:middle
Estamos buscando "Expires".

00:04:45.506 --> 00:04:49.866 align:middle
Si no lo ves -o sigue sin
caducar- haz un refresco forzado.

00:04:50.326 --> 00:04:56.016 align:middle
Este es un caso raro en el que el archivo no ha cambiado,
pero puede que aún tengamos la versión en caché

00:04:56.016 --> 00:04:58.196 align:middle
de hace un minuto con la cabecera antigua.

00:04:58.876 --> 00:05:02.076 align:middle
Y si ves esto, ¡enhorabuena!

00:05:02.286 --> 00:05:03.206 align:middle
Ese es el objetivo.

00:05:03.946 --> 00:05:09.626 align:middle
Así pues, nuestros activos se están comprimiendo,
y tienen cabeceras "Expires" de larga duración.

00:05:09.916 --> 00:05:12.676 align:middle
Hemos marcado todas las casillas
para tener un sitio web eficaz

00:05:13.386 --> 00:05:17.316 align:middle
A continuación: Vamos a demostrar que
el sitio es rápido utilizando Lighthouse

00:05:17.316 --> 00:05:19.196 align:middle
para perfilar el rendimiento del sitio.

00:05:19.666 --> 00:05:23.186 align:middle
Aprenderemos cómo se descargan los
archivos, cómo se construyen las páginas

00:05:23.686 --> 00:05:26.526 align:middle
y haremos que nuestro frontend
sea aún más eficiente.
