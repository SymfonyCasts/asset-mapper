WEBVTT

00:00:01.156 --> 00:00:04.966 align:middle
Antes de hablar de cualquier cosa relacionada
con Symfony, vamos a reducir las cosas al

00:00:04.966 --> 00:00:11.496 align:middle
mínimo y demostrar que podemos codificar JavaScript
moderno, directamente en nuestro navegador.

00:00:12.136 --> 00:00:16.046 align:middle
Ve directamente al directorio public/
y crea un nuevo archivo app.js.

00:00:16.716 --> 00:00:19.086 align:middle
Para empezar, escribe un
mensaje en console.log().

00:00:19.626 --> 00:00:23.086 align:middle
Esto no será procesado por
Symfony ni nada parecido.

00:00:23.856 --> 00:00:28.556 align:middle
En templates/base.html.twig, aquí
arriba en el bloque javascripts,

00:00:28.936 --> 00:00:33.536 align:middle
aunque eso no supone ninguna diferencia, añade
una aburrida etiqueta <script> para esto:

00:00:33.836 --> 00:00:37.956 align:middle
<script src="{{ asset('app.js') }}">.

00:00:38.476 --> 00:00:40.306 align:middle
Estoy utilizando la función asset()...

00:00:40.706 --> 00:00:42.876 align:middle
pero eso tampoco hace nada.

00:00:43.656 --> 00:00:47.656 align:middle
Vale, ve al navegador, abre tu Consola y...

00:00:47.876 --> 00:00:49.976 align:middle
refresca. ¡Ahí está el registro!

00:00:50.486 --> 00:00:53.276 align:middle
Es aburrido, pero funciona.

00:00:53.826 --> 00:00:55.906 align:middle
¡Es hora de poner las cosas interesantes!

00:00:56.466 --> 00:00:59.366 align:middle
De vuelta en app.js, copia
el nombre de la mezcla.

00:00:59.856 --> 00:01:05.796 align:middle
Vamos a crear una clase class MixedVinyl,
con un constructor y algunas propiedades.

00:01:07.126 --> 00:01:13.326 align:middle
Esto utiliza la sintaxis de clase
introducida en ES6, o ECMAScript 6...

00:01:13.686 --> 00:01:16.216 align:middle
básicamente la versión "6" de JavaScript.

00:01:16.946 --> 00:01:21.666 align:middle
Oirás hablar mucho de ES6 porque la mayoría de
las funciones modernas a las que estás acostumbrado

00:01:21.666 --> 00:01:25.666 align:middle
provienen de esta versión, lanzada en 2015.

00:01:26.506 --> 00:01:30.256 align:middle
En el método describe(), aprovecho
la interpolación de cadenas

00:01:30.496 --> 00:01:34.036 align:middle
-otra función moderna de
ES6- para devolver la cadena.

00:01:35.016 --> 00:01:41.746 align:middle
A continuación, utiliza esto const - otra
función de ES6 - mix = new MixedVinyl()

00:01:42.156 --> 00:01:43.866 align:middle
y pasa el nombre de la mezcla y el año.

00:01:45.386 --> 00:01:48.816 align:middle
Por último, console.log(mix.describe()).

00:01:49.516 --> 00:01:52.916 align:middle
¡Genial! Este es el tipo de código
que me gusta escribir cada día.

00:01:53.336 --> 00:01:59.696 align:middle
Por desgracia, ¡también es el tipo de código que
históricamente se les ha atragantado a los navegadores!

00:02:00.156 --> 00:02:05.796 align:middle
Así que, normalmente, tendríamos un sistema de
construcción como Encore que leería este código moderno

00:02:05.796 --> 00:02:08.176 align:middle
y lo reescribiría en JavaScript antiguo...

00:02:08.496 --> 00:02:10.456 align:middle
para que funcionara en nuestro navegador.

00:02:11.056 --> 00:02:12.466 align:middle
Pero... ¡tachán!

00:02:12.716 --> 00:02:14.436 align:middle
¡Ya funciona en nuestro navegador!

00:02:14.726 --> 00:02:16.246 align:middle
No tenemos que hacer nada.

00:02:16.506 --> 00:02:19.376 align:middle
Y no es sólo porque esté
utilizando un navegador nuevo.

00:02:19.746 --> 00:02:22.166 align:middle
Esto va a funcionar en todos los navegadores.

00:02:22.896 --> 00:02:27.166 align:middle
Si alguna vez tienes dudas, ve a
https://caniuse.com para comprobarlo.

00:02:27.736 --> 00:02:29.886 align:middle
Busquemos "clase ES6".

00:02:31.206 --> 00:02:34.226 align:middle
Sí, básicamente es compatible con todo...

00:02:34.436 --> 00:02:37.766 align:middle
excepto IE 11, que está muerto.

00:02:38.876 --> 00:02:40.506 align:middle
Pero, ¿qué pasa con la declaración import?

00:02:41.256 --> 00:02:47.056 align:middle
Copia el class MixedVinyl y luego crea otro archivo
directamente dentro de public/ llamado vinyl.js.

00:02:47.196 --> 00:02:53.616 align:middle
Pega esto y luego export: export default class.

00:02:55.086 --> 00:03:00.206 align:middle
Vuelve a app.js, import MixedVinyl from y, al

00:03:00.206 --> 00:03:04.426 align:middle
igual que hacemos en Encore, utiliza
la ruta relativa: ./vinyl.js . Sin

00:03:04.726 --> 00:03:05.836 align:middle
embargo,

00:03:06.856 --> 00:03:11.426 align:middle
fíjate en que estoy incluyendo la
extensión de archivo .js... lo cual

00:03:11.676 --> 00:03:14.846 align:middle
puedes hacer en Encore,
pero no es necesario. Más

00:03:15.276 --> 00:03:18.726 align:middle
adelante hablaremos de ello, pero
ha sido a propósito. Entonces...

00:03:19.496 --> 00:03:22.726 align:middle
¿mi navegador admite la extensión import?

00:03:23.336 --> 00:03:24.166 align:middle
Averigüémoslo Actualizar.

00:03:24.836 --> 00:03:33.266 align:middle
Booo: No se puede utilizar la sentencia import
fuera de un módulo Vale, no es un "código rojo"

00:03:33.266 --> 00:03:35.576 align:middle
, es más bien un "código naranja".

00:03:36.056 --> 00:03:38.326 align:middle
Vuelve a base.html.twig. Cuando

00:03:39.406 --> 00:03:44.376 align:middle
oigas la palabra "módulo", se refiere a los
archivos que aprovechan export y import. Y

00:03:44.686 --> 00:03:48.076 align:middle
si quieres que tu JavaScript pueda utilizarlos,

00:03:48.406 --> 00:03:51.586 align:middle
tienes que cargar el archivo
original "como módulo". Es

00:03:52.116 --> 00:03:53.426 align:middle
un cambio sencillo. Copia

00:03:54.036 --> 00:03:59.246 align:middle
la función asset() y pon ahora
<script type="module">. Entonces, en

00:03:59.796 --> 00:04:08.126 align:middle
lugar de src, dentro, vamos a escribir algo de
JavaScript en import nuestro archivo app.js. Esto

00:04:08.716 --> 00:04:10.896 align:middle
puede parecer una locura al principio, pero...

00:04:10.946 --> 00:04:14.136 align:middle
simplemente estamos importando la
ruta a nuestro archivo app.js. Al

00:04:15.086 --> 00:04:20.246 align:middle
hacer esto, app.js se ejecutará
exactamente igual que antes... pero

00:04:20.496 --> 00:04:22.326 align:middle
como un "módulo"... lo que

00:04:22.636 --> 00:04:26.506 align:middle
sólo significa que las declaraciones import
y export "deberían" funcionar. ¿Funcionan

00:04:27.186 --> 00:04:30.196 align:middle
? ¡Funcionan! OMG,

00:04:30.396 --> 00:04:33.936 align:middle
¡nuestro navegador admite la sentencia import!

00:04:34.636 --> 00:04:37.286 align:middle
Incluso podemos importar
paquetes de terceros. Para

00:04:37.656 --> 00:04:41.806 align:middle
encontrar uno, voy a utilizar
mi CDN favorito: "jsDelivr".

00:04:42.736 --> 00:04:45.236 align:middle
Lo utilizaremos bastante a
lo largo del tutorial. Pero

00:04:45.756 --> 00:04:50.506 align:middle
no es necesario que utilices la CDN
de jsDelivr en tu código final. Es

00:04:51.066 --> 00:04:54.056 align:middle
una réplica de cada paquete NPM... y

00:04:54.056 --> 00:04:56.706 align:middle
por eso es un lugar conveniente para
encontrar lo que necesitamos. Busca

00:04:57.626 --> 00:04:59.996 align:middle
el popular paquete "lodash". Cuando

00:05:01.006 --> 00:05:05.046 align:middle
lo seleccionamos, nos muestra una etiqueta
<script> que podríamos utilizar. Haz clic

00:05:05.426 --> 00:05:10.896 align:middle
en "ESM", que es la abreviatura
de módulos ECMAScript. Cuando

00:05:11.496 --> 00:05:17.146 align:middle
codifiques con importaciones y exportaciones,
querrás la versión ESM de un paquete: es

00:05:17.386 --> 00:05:20.376 align:middle
una versión que "exporta"
módulos correctamente.

00:05:20.986 --> 00:05:29.686 align:middle
Fíjate en la etiqueta script: ¡Se
parece mucho al código que tenemos aquí!

00:05:30.506 --> 00:05:34.486 align:middle
No lo utilizaremos exactamente,
pero voy a copiar la URL. Ahora

00:05:35.836 --> 00:05:38.016 align:middle
vuelve a app.js. Para utilizar

00:05:38.816 --> 00:05:45.216 align:middle
lodash podemos decir import _ from
y pegar esa URL completa. Sí,

00:05:45.756 --> 00:05:49.876 align:middle
importar desde una URL completa
está totalmente permitido. O

00:05:50.306 --> 00:05:54.016 align:middle
podríamos descargar este archivo localmente: Hablaré
más sobre esto más adelante. A continuación, digamos

00:05:54.966 --> 00:05:59.336 align:middle
_.camelCase() para llamar a uno de
sus métodos. ¡ Vamos a probarlo

00:06:00.356 --> 00:06:00.876 align:middle
! Gira

00:06:01.296 --> 00:06:03.836 align:middle
, actualiza y... ¡mira

00:06:04.226 --> 00:06:05.226 align:middle
eso!.

00:06:05.536 --> 00:06:10.646 align:middle
Aquí no hay sistema de compilación: sólo estamos
jugando con archivos dentro del directorio public/. Y , sin

00:06:11.266 --> 00:06:16.116 align:middle
embargo, estamos escribiendo JavaScript
moderno, importando y exportando módulos y

00:06:16.366 --> 00:06:19.406 align:middle
utilizando un paquete NPM de terceros. Es

00:06:19.656 --> 00:06:21.516 align:middle
bastante asombroso. Sin embargo,

00:06:22.056 --> 00:06:25.096 align:middle
quedan dos problemas. En primer lugar,

00:06:25.756 --> 00:06:30.746 align:middle
importar paquetes utilizando
la URL completa es molesto.

00:06:30.746 --> 00:06:38.286 align:middle
Quiero poder decir import from 'lodash'. El
segundo problema es el versionado de activos. Para

00:06:38.816 --> 00:06:43.556 align:middle
tener un sistema eficaz, necesitamos que los
archivos finales descargados por el navegador

00:06:43.766 --> 00:06:51.196 align:middle
tengan hashes de versión en sus nombres
de archivo, como app.1234abcd.js.

00:06:52.186 --> 00:06:57.256 align:middle
Lo necesitamos para poder indicar a los navegadores que
realicen un almacenamiento en caché a largo plazo. Y

00:06:57.646 --> 00:07:01.926 align:middle
no podemos conseguirlo creando y sirviendo
archivos directamente desde public/. Éstas

00:07:02.686 --> 00:07:04.826 align:middle
son precisamente las dos cosas que

00:07:04.826 --> 00:07:08.336 align:middle
el nuevo componente AssetMapper de
Symfony nos ayudará a resolver. Pero

00:07:08.936 --> 00:07:12.326 align:middle
quería empezar con JavaScript en bruto para
que pudiéramos ver cómo... la mayor parte

00:07:12.556 --> 00:07:18.236 align:middle
de lo que estamos haciendo no lo
resuelve Symfony ni AssetMapper ni la IA:

00:07:18.886 --> 00:07:22.196 align:middle
lo resuelve tu navegador y
la web moderna. Vale, vamos a

00:07:23.056 --> 00:07:26.746 align:middle
eliminar estos dos archivos
para no confundirme... y

00:07:27.156 --> 00:07:31.156 align:middle
también vamos a eliminar el import
dentro de base.html.twig. ¡No

00:07:32.006 --> 00:07:32.436 align:middle
te preocupes!

00:07:32.676 --> 00:07:35.716 align:middle
Pronto veremos todo ese código
de otra forma. A continuación:

00:07:36.636 --> 00:07:40.096 align:middle
Instalemos AssetMapper y pongámoslo en marcha.
