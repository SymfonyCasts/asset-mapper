WEBVTT

00:00:01.056 --> 00:00:02.236 align:middle
Visita /admin.

00:00:02.856 --> 00:00:07.196 align:middle
¡Sorpresa! Tenemos una sección de
administración en nuestro sitio.

00:00:07.696 --> 00:00:08.536 align:middle
Bueno... más o menos.

00:00:08.716 --> 00:00:13.706 align:middle
Es sólo un gran rectángulo, pero
representa a un administrador ficticio.

00:00:14.646 --> 00:00:19.936 align:middle
¿Por qué? Bueno, supongamos que tenemos
algunos CSS y JS que sólo se necesitan aquí.

00:00:20.586 --> 00:00:24.786 align:middle
Si escribimos eso de la forma normal y en
los archivos normales, ese código se va a

00:00:24.786 --> 00:00:29.506 align:middle
descargar en todas partes, incluso cuando
alguien vaya al frontend de nuestro sitio.

00:00:30.186 --> 00:00:33.466 align:middle
Eso, como mínimo, es un despilfarro.

00:00:34.216 --> 00:00:39.766 align:middle
Una forma mejor es descargar el CSS y el JS del
admin sólo cuando se visita el área del admin

00:00:40.416 --> 00:00:44.296 align:middle
Mi forma favorita de hacerlo es con
los controladores lazy S timulus,

00:00:44.586 --> 00:00:46.696 align:middle
de los que ya hemos hablado.

00:00:47.416 --> 00:00:51.776 align:middle
Pero otra opción es crear un
conjunto extra de CSS y JavaScript

00:00:51.956 --> 00:00:55.336 align:middle
que se carguen explícitamente
sólo en estas páginas.

00:00:55.886 --> 00:00:57.896 align:middle
Veamos cómo hacerlo con AssetMapper.

00:00:58.736 --> 00:01:05.966 align:middle
Si utilizáramos Webpack Encore, abriríamos el archivo
webpack.config.js y añadiríamos una segunda entrada.

00:01:06.486 --> 00:01:09.796 align:middle
Eso daría lugar a un nuevo
archivo CSS y JavaScript.

00:01:10.486 --> 00:01:13.766 align:middle
En AssetMapper, podemos
hacer algo muy parecido.

00:01:14.486 --> 00:01:17.626 align:middle
Empecemos por el CSS, que es bastante sencillo.

00:01:18.326 --> 00:01:22.936 align:middle
En el directorio assets/styles/,
crea un archivo admin.css y,

00:01:23.226 --> 00:01:28.966 align:middle
para ver si las cosas funcionan, añade
.admin-wrapper con un poco de relleno X-Y.

00:01:29.786 --> 00:01:31.636 align:middle
Eso añadirá un poco de espacio aquí.

00:01:32.386 --> 00:01:37.936 align:middle
A continuación, entra en la plantilla de esta
página - templates/admin/dashboard.html.twig - y,

00:01:38.056 --> 00:01:41.466 align:middle
justo aquí, añade esa
clase: class="admin-wrapper".

00:01:42.216 --> 00:01:48.036 align:middle
En este punto, el nuevo archivo admin.css
está técnicamente disponible públicamente...

00:01:48.556 --> 00:01:50.596 align:middle
porque está en el directorio assets/.

00:01:51.126 --> 00:01:53.036 align:middle
Pero, aún no lo estamos utilizando.

00:01:53.726 --> 00:01:55.546 align:middle
Para ello, necesitamos una etiqueta de enlace.

00:01:56.256 --> 00:01:58.066 align:middle
Esto no tiene nada de especial.

00:01:58.066 --> 00:02:03.946 align:middle
Di {% block stylesheets %} y {% endblock %}
para anular el bloque de la plantilla padre.

00:02:04.476 --> 00:02:08.956 align:middle
Luego llama a {{ parent() }} para
incluir lo normal y, aquí abajo,

00:02:09.286 --> 00:02:14.786 align:middle
añade <link rel="stylesheet"
apuntando a asset('styles/admin.css').

00:02:15.796 --> 00:02:17.866 align:middle
Y... déjame arreglar mi errata aquí arriba.

00:02:18.716 --> 00:02:19.996 align:middle
Eso es lo que queremos.

00:02:20.656 --> 00:02:21.526 align:middle
De vuelta al sitio...

00:02:22.226 --> 00:02:26.766 align:middle
¡sí! El CSS se está
aplicando: tenemos relleno extra.

00:02:27.316 --> 00:02:28.736 align:middle
Refrescantemente sencillo.

00:02:29.606 --> 00:02:31.406 align:middle
Pero... ¿qué pasa con JavaScript?

00:02:31.996 --> 00:02:34.396 align:middle
Una vez más, empezaremos como en Encore.

00:02:35.086 --> 00:02:35.976 align:middle
Crea un nuevo archivo...

00:02:36.376 --> 00:02:39.996 align:middle
quizá junto a app.js llamado admin.js.

00:02:40.746 --> 00:02:44.636 align:middle
Añade console.log('admin.js file') para
que podamos ver si se está cargando.

00:02:45.516 --> 00:02:50.166 align:middle
Al igual que con el archivo CSS, este
archivo está disponible públicamente...

00:02:50.426 --> 00:02:52.246 align:middle
pero nada lo está cargando.

00:02:52.886 --> 00:02:56.266 align:middle
Recuerda: el archivo app.js se carga

00:02:56.266 --> 00:03:01.106 align:middle
gracias a esta línea <script
type="module"> de aquí abajo que importa app.

00:03:02.006 --> 00:03:05.896 align:middle
Lo obtenemos automáticamente,
en base.html.twig,

00:03:06.396 --> 00:03:08.366 align:middle
a través de la función Twig importmap().

00:03:09.346 --> 00:03:14.166 align:middle
Entonces... ¿hay alguna forma de decirle a esta
función que importe también nuestro archivo admin.js?

00:03:14.896 --> 00:03:16.236 align:middle
En realidad, ¡no!

00:03:16.956 --> 00:03:18.996 align:middle
¿Por qué? Principalmente porque...

00:03:19.266 --> 00:03:22.016 align:middle
¡es tan fácil añadirlo nosotros mismos!

00:03:22.756 --> 00:03:29.386 align:middle
Observa: de vuelta en dashboard.html.twig,
di {% block javascripts %},

00:03:29.386 --> 00:03:32.006 align:middle
{% endblock%}, luego {{ parent() }}.

00:03:32.716 --> 00:03:36.456 align:middle
Debajo, añade una etiqueta
<script> con type="module".

00:03:36.456 --> 00:03:40.366 align:middle
Ahora vamos a codificar como si
estuviéramos en un archivo JavaScript.

00:03:40.976 --> 00:03:45.066 align:middle
Di import y luego la ruta
al archivo JavaScript.

00:03:45.716 --> 00:03:50.346 align:middle
Efectivamente, queremos algo
como - /assets/admin.js.

00:03:50.786 --> 00:03:55.296 align:middle
Pero, por supuesto, para obtener la
ruta real utilizamos la función asset()

00:03:55.766 --> 00:03:58.836 align:middle
y le pasamos la ruta lógica: admin.js.

00:03:58.836 --> 00:03:59.546 align:middle
¡Ya está!

00:04:00.656 --> 00:04:02.366 align:middle
¡Vamos a probarlo!

00:04:02.956 --> 00:04:05.596 align:middle
Actualiza y comprueba la consola.

00:04:06.296 --> 00:04:10.006 align:middle
¡Ya está! ¡Nuestro archivo
admin.js se está cargando!

00:04:10.426 --> 00:04:11.996 align:middle
Si echas un vistazo a la
fuente de la página...

00:04:12.376 --> 00:04:13.046 align:middle
aquí abajo...

00:04:13.706 --> 00:04:19.696 align:middle
sí. Puedes ver <script type="module"> desde
la función importmap() donde dice import 'app'.

00:04:20.446 --> 00:04:24.666 align:middle
Y, después, importamos
admin.js a través de su ruta.

00:04:25.396 --> 00:04:27.536 align:middle
El original es sólo import 'app'...

00:04:28.026 --> 00:04:32.736 align:middle
porque confiamos en el importmap
para mapearlo a su URL.

00:04:33.466 --> 00:04:34.646 align:middle
Eso está bien...

00:04:34.716 --> 00:04:37.066 align:middle
pero en realidad no es necesario.

00:04:37.686 --> 00:04:40.096 align:middle
Poner la ruta aquí también funciona bien.

00:04:40.556 --> 00:04:42.466 align:middle
Eso es lo que hacemos por simplicidad.

00:04:43.356 --> 00:04:46.396 align:middle
Una de las cosas que hemos visto en
este capítulo es que todo lo que

00:04:46.396 --> 00:04:49.066 align:middle
hay en el directorio assets/
se expone públicamente...

00:04:49.456 --> 00:04:52.166 align:middle
¡que es para lo que sirve AssetMapper!

00:04:52.726 --> 00:04:58.746 align:middle
Pero a veces puedes tener algunos archivos que quieras
poner en ese directorio, pero mantenerlos privados.

00:04:59.576 --> 00:05:04.716 align:middle
Veamos a continuación la función de exclusión
de AssetMapper y otras opciones de configuración.
