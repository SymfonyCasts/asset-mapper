WEBVTT

00:00:01.056 --> 00:00:05.066 align:middle
Acabamos de descubrir un problema: nuestro
navegador necesita descargar la página...

00:00:05.286 --> 00:00:10.416 align:middle
y un archivo CSS antes siquiera de darse
cuenta de que necesita descargar esta fuente.

00:00:10.856 --> 00:00:15.166 align:middle
Puede que esto no sea un gran problema,
pero hay una solución genial: la precarga.

00:00:15.756 --> 00:00:19.606 align:middle
Busca la URL de la fuente -es
esta "normal"- y cópiala.

00:00:21.036 --> 00:00:26.076 align:middle
A continuación, abre base.html.twig y, aquí
arriba, añade una etiqueta <link>.

00:00:26.846 --> 00:00:31.016 align:middle
A diferencia de un <link rel="stylesheet"
normal que apunta a un archivo CSS, el

00:00:31.346 --> 00:00:37.986 align:middle
propósito de esta etiqueta de enlace será
gritar al navegador: Oye, aún no lo sabes,

00:00:38.196 --> 00:00:40.336 align:middle
pero deberías descargar
este archivo de fuentes.

00:00:41.056 --> 00:00:48.106 align:middle
Para ello, di rel="preload" y
luego href="" y pega esa URL larga.

00:00:48.606 --> 00:00:52.046 align:middle
Y cuando precarguemos fuentes,
tenemos que añadir as="font",

00:00:52.616 --> 00:00:59.576 align:middle
type="font/woff2", y crossorigin="" al final.

00:00:59.736 --> 00:01:02.286 align:middle
Vale, ¡a ver qué opina Lighthouse de esto!

00:01:04.896 --> 00:01:08.596 align:middle
Después... seguimos puntuando 100 - ¡viva!

00:01:09.136 --> 00:01:13.766 align:middle
- y en "Evitar encadenar peticiones críticas",
ese archivo de fuentes ha desaparecido.

00:01:14.546 --> 00:01:17.836 align:middle
Pero... ¿qué pasa con app.tailwind.css ?

00:01:18.716 --> 00:01:24.146 align:middle
El navegador descarga el HTML y ve
inmediatamente la etiqueta link para esto.

00:01:24.746 --> 00:01:27.566 align:middle
¿Hay alguna forma de indicar al navegador que

00:01:27.566 --> 00:01:32.406 align:middle
debe descargar app.tailwind.css
incluso antes de descargar el HTML?

00:01:32.886 --> 00:01:35.916 align:middle
La respuesta, sorprendentemente, es ¡sí!

00:01:36.466 --> 00:01:38.946 align:middle
Pero necesitamos un componente
de Symfony llamado "WebLink".

00:01:39.526 --> 00:01:46.396 align:middle
En tu terminal, ejecuta: composer require
symfony/web-link Una vez hecho esto,

00:01:46.656 --> 00:01:50.736 align:middle
de vuelta en base.html.twig,
añade otra precarga aquí abajo de

00:01:50.736 --> 00:01:54.866 align:middle
aspecto similar: <link
rel="preload" href="">.

00:01:55.556 --> 00:02:00.496 align:middle
Esta vez, utiliza una función Twig llamada
preload() pasando la función normal asset()

00:02:00.586 --> 00:02:03.596 align:middle
para que apunte a styles/app.tailwind.css.

00:02:03.596 --> 00:02:09.356 align:middle
En este caso, esta función preload
necesita otra opción llamada as: 'style'.

00:02:10.386 --> 00:02:11.616 align:middle
Ya está

00:02:11.616 --> 00:02:14.966 align:middle
Ve a actualizar la página y
"Ver fuente de la página".

00:02:14.966 --> 00:02:17.846 align:middle
No te sorprendas: esto da como
resultado una etiqueta preload.

00:02:18.526 --> 00:02:22.376 align:middle
Y... ¡hasta ahora, la función Twig preload()

00:02:22.376 --> 00:02:25.556 align:middle
no parece más que un atajo semi-inútil!

00:02:26.196 --> 00:02:32.576 align:middle
Es más, para el archivo app.tailwind.css,
¡esta etiqueta link no tiene sentido!

00:02:33.086 --> 00:02:38.466 align:middle
Esto básicamente le dice al navegador Oye,
deberías empezar a descargar este archivo CSS.

00:02:38.986 --> 00:02:43.136 align:middle
Pero... ¡una línea más tarde, lo
habría encontrado de todos modos!

00:02:43.646 --> 00:02:45.706 align:middle
Entonces, ¿por qué hemos hecho esto?

00:02:46.396 --> 00:02:52.546 align:middle
Resulta que la función preload() hace dos
cosas: da salida a la etiqueta link href ...

00:02:52.546 --> 00:02:57.876 align:middle
pero también le dice a Symfony que debe añadir
una cabecera preload a la respuesta. Ve a las

00:02:58.586 --> 00:03:04.566 align:middle
Herramientas de red, selecciona "Todas", busca
nuestra página principal, ve a "Encabezados",

00:03:04.836 --> 00:03:08.036 align:middle
y mira en "Encabezados de respuesta" ¡Woh!

00:03:08.036 --> 00:03:12.926 align:middle
¡Tenemos una nueva cabecera "Enlace" llamada
"precarga" que apunta a nuestro archivo CSS!

00:03:12.926 --> 00:03:19.586 align:middle
Así, cuando el navegador empieza a descargar la
respuesta, en la parte superior ve una indicación de que

00:03:19.656 --> 00:03:22.226 align:middle
debe empezar a descargar ese archivo CSS

00:03:22.226 --> 00:03:27.816 align:middle
Si volvemos a Lighthouse y analizamos
de nuevo la carga de la página...

00:03:30.156 --> 00:03:31.046 align:middle
aquí abajo...

00:03:32.486 --> 00:03:33.406 align:middle
¡precioso!

00:03:33.656 --> 00:03:35.966 align:middle
Toda esa sección ha desaparecido. Hay algunas

00:03:36.886 --> 00:03:41.926 align:middle
cosas más aquí, como "Mantén bajos los recuentos de
peticiones y pequeños los tamaños de transferencia",

00:03:42.356 --> 00:03:45.446 align:middle
pero no son realmente advertencias:
sólo algo a tener en cuenta.

00:03:46.326 --> 00:03:50.216 align:middle
Pero en el tema de la precarga,
aunque no tengamos más advertencias,

00:03:50.616 --> 00:03:54.276 align:middle
hay otro punto en el que la precarga
puede mejorar el rendimiento,

00:03:54.656 --> 00:03:56.576 align:middle
y tiene que ver con JavaScript.

00:03:57.286 --> 00:04:02.546 align:middle
En importmap.php, hay una clave llamada
preload de la que no hemos hablado.

00:04:02.956 --> 00:04:04.676 align:middle
Está configurada en true para app.

00:04:05.316 --> 00:04:06.776 align:middle
Ponla en false.

00:04:07.556 --> 00:04:11.186 align:middle
Ahora, muévete y ejecuta
otro informe Lighthouse.

00:04:13.086 --> 00:04:18.236 align:middle
Seguimos obteniendo una puntuación
de 100, pero si bajamos aquí, ah:

00:04:18.646 --> 00:04:21.786 align:middle
"Evitar encadenar peticiones
críticas" ¡ha vuelto!

00:04:22.286 --> 00:04:23.006 align:middle
¡Y fíjate!

00:04:23.356 --> 00:04:28.466 align:middle
Tenemos la página HTML, hasta
app.js, luego bootstrap.js,

00:04:28.716 --> 00:04:32.046 align:middle
el cargador de Stimulus , el propio
Stimulus, los controladores...

00:04:32.286 --> 00:04:35.096 align:middle
vaya. Se están encadenando
un montón de cosas.

00:04:35.816 --> 00:04:39.286 align:middle
Es el mismo problema que vimos
con los archivos CSS y de fuentes.

00:04:39.286 --> 00:04:42.076 align:middle
Primero, nuestro navegador descarga el HTML.

00:04:42.486 --> 00:04:45.636 align:middle
Luego ve que necesita descargar app.js.

00:04:46.186 --> 00:04:50.856 align:middle
Una vez que descarga ese archivo, ve que necesita descargar
bootstrap.js. Luego, se da cuenta de que necesita descargar

00:04:51.216 --> 00:04:55.046 align:middle
el stimulus-bundle/loader,

00:04:55.266 --> 00:04:58.396 align:middle
y así sucesivamente: uno por uno.

00:04:58.396 --> 00:05:01.796 align:middle
En lugar de descargar todas
esas cosas en paralelo,

00:05:02.036 --> 00:05:04.806 align:middle
tiene que descubrirlas poco a poco.

00:05:05.286 --> 00:05:06.606 align:middle
preload arregla eso.

00:05:07.386 --> 00:05:12.776 align:middle
Cambia esto de nuevo a true, actualiza la
página y mira el código fuente de la página.

00:05:13.896 --> 00:05:19.726 align:middle
Sabemos que la función Twig importmap() descarga
importmap y <script type="module">.

00:05:20.276 --> 00:05:23.216 align:middle
Pero también vuelca estas
cosas de modulepreload.

00:05:23.786 --> 00:05:25.206 align:middle
Estas son geniales.

00:05:25.856 --> 00:05:32.966 align:middle
Como dijimos 'preload' => true para app, añade
un <link rel="modulepreload"> para app.js.

00:05:33.716 --> 00:05:38.236 align:middle
Eso indica al navegador que debe empezar
a descargar app.js inmediatamente.

00:05:38.816 --> 00:05:42.866 align:middle
Aunque, en realidad, eso
no es importante porque,

00:05:42.866 --> 00:05:45.306 align:middle
de todos modos, se habría dado cuenta
en aproximadamente 1 microsegundo.

00:05:46.216 --> 00:05:53.776 align:middle
Lo realmente importante es que AssetMapper
ve que assets/app.js importa bootstrap.js.

00:05:54.416 --> 00:05:59.116 align:middle
Y como app.js está precargado,
también precarga bootstrap.js. Y como

00:05:59.116 --> 00:06:01.976 align:middle
éste importa ./lib/vinyl.js
, también precarga

00:06:01.976 --> 00:06:06.026 align:middle
./lib/vinyl.js. Así

00:06:06.026 --> 00:06:07.326 align:middle
que

00:06:08.296 --> 00:06:11.826 align:middle
descargará los tres archivos
inmediatamente. En este

00:06:12.556 --> 00:06:16.656 align:middle
punto, si ejecutáramos Lighthouse
de nuevo, no se quejaría de ninguna

00:06:16.656 --> 00:06:19.066 align:middle
de estas peticiones encadenadas. Pero

00:06:19.066 --> 00:06:20.786 align:middle
aún podemos mejorar. En las

00:06:21.316 --> 00:06:25.006 align:middle
herramientas de red, para JavaScript,
fíjate en la columna de cascada. Vemos

00:06:25.526 --> 00:06:29.526 align:middle
que empiezan a descargarse unos cuantos
archivos, y luego unos cuantos más... y

00:06:29.996 --> 00:06:30.946 align:middle
unos cuantos más. Así que

00:06:30.946 --> 00:06:33.266 align:middle
seguimos teniendo este problema
de encadenamiento, aunque

00:06:33.516 --> 00:06:36.866 align:middle
aparentemente no es lo suficientemente grave como
para que Lighthouse informe sobre él. Sabemos

00:06:37.646 --> 00:06:44.476 align:middle
que bootstrap.js se está precargando, pero
@symfony/stimulus-bundle no... aunque se

00:06:44.856 --> 00:06:47.936 align:middle
importe desde bootstrap.js. ¿Por qué

00:06:48.716 --> 00:06:52.576 align:middle
la precarga no "sigue" esa
importación como las demás?

00:06:53.186 --> 00:06:58.176 align:middle
Lo que hay que entender es que, como estamos
precargando app.js, cualquier cosa que

00:06:58.546 --> 00:07:05.396 align:middle
app.js importe con una importación relativa también se precargará
automáticamente. Pero cualquier cosa que importemos con una importación

00:07:06.096 --> 00:07:13.166 align:middle
desnuda, como lodash/camelCase o @symfony/stimulus-bundle
, no se precargará automáticamente.

00:07:13.526 --> 00:07:15.636 align:middle
Tal vez

00:07:16.376 --> 00:07:21.726 align:middle
deberían, pero tienen sus propias entradas
dentro de importmap.php, así que tú

00:07:21.726 --> 00:07:24.766 align:middle
controlas la precarga de esas
independientemente. En este

00:07:25.386 --> 00:07:30.396 align:middle
punto, realmente estamos optimizando el
rendimiento -quizás sobreoptimizando-. Pero si

00:07:31.056 --> 00:07:34.836 align:middle
quieres evitar este problema de
encadenamiento, podrías añadir preload a los

00:07:34.836 --> 00:07:38.216 align:middle
elementos que sabemos que serán críticos para
la representación de la página. Por ejemplo,

00:07:38.216 --> 00:07:43.726 align:middle
@hotwired/stimulus es crítico,
stimulus-bundle es crítico porque es

00:07:43.986 --> 00:07:49.126 align:middle
lo que carga nuestros controladores, y
@hotwired/turbo también es crítico. Cuando

00:07:49.896 --> 00:07:50.766 align:middle
actualizamos... nada cambia:

00:07:51.526 --> 00:07:56.626 align:middle
sólo tenemos más elementos
modulepreload en el HTML. Si

00:07:57.526 --> 00:08:05.046 align:middle
ejecutamos Lighthouse una vez más, seguimos
obteniendo una puntuación de 100, y

00:08:05.476 --> 00:08:08.116 align:middle
puedes ver que no hay grandes
problemas aquí abajo. Fantástico.

00:08:08.116 --> 00:08:09.906 align:middle
Por

00:08:10.786 --> 00:08:15.566 align:middle
cierto, si ahora estás pensando: ¿Por
qué no lo precargamos todo? ¡Es una

00:08:16.166 --> 00:08:17.116 align:middle
buena idea! Pero, ¡no lo hagas!

00:08:17.516 --> 00:08:18.676 align:middle
Tu navegador

00:08:19.126 --> 00:08:24.996 align:middle
es inteligente, y sin precargas, tiene un
algoritmo muy inteligente para determinar

00:08:25.186 --> 00:08:29.766 align:middle
el mejor orden de descarga de los archivos para
cargar las cosas lo más rápido posible. Si

00:08:30.416 --> 00:08:35.546 align:middle
lo precargaras todo, probablemente el orden de carga
no sería tan bueno. Utiliza las precargas sólo

00:08:36.086 --> 00:08:39.856 align:middle
para los activos críticos. ¡De
acuerdo! ¡Lo hemos conseguido

00:08:39.856 --> 00:08:41.416 align:middle
! Creo que

00:08:41.916 --> 00:08:46.566 align:middle
AssetMapper es un soplo de aire fresco,
¡y espero que tú pienses lo mismo! Hay

00:08:47.316 --> 00:08:52.146 align:middle
algunas cosas que no hace, como agitar
árboles o manejar TypeScript. Pero para

00:08:52.616 --> 00:08:56.226 align:middle
un gran número de proyectos,
¡es una gran solución! Y lo

00:08:56.226 --> 00:09:00.366 align:middle
mejor es que sigues escribiendo
JavaScript normal. Así que si

00:09:00.686 --> 00:09:05.016 align:middle
alguna vez necesitas cambiar a un sistema
de compilación, puedes hacerlo. Dinos

00:09:05.826 --> 00:09:10.586 align:middle
lo que piensas, y esperamos poder hacer más mejoras
para Symfony 6.4. Muy bien amigos, ¡ hasta la

00:09:10.586 --> 00:09:13.066 align:middle
próxima!
